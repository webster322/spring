package pl.basestudio.springlessons.financeassistant;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Primary;
import org.springframework.context.annotation.Profile;
import org.springframework.context.annotation.PropertySource;
import org.springframework.context.support.PropertySourcesPlaceholderConfigurer;
import org.springframework.context.support.ResourceBundleMessageSource;

import pl.basestudio.springlessons.financeassistant.services.CurrencyRateProvider;
import pl.basestudio.springlessons.financeassistant.services.DatabaseCurrencyRateProvider;
import pl.basestudio.springlessons.financeassistant.services.FileCurrencyRateProvider;
import pl.basestudio.springlessons.financeassistant.services.FixedPrecisionProvider;
import pl.basestudio.springlessons.financeassistant.services.JpyPrecisionProvider;
import pl.basestudio.springlessons.financeassistant.services.RateConversionService;
import pl.basestudio.springlessons.financeassistant.services.RoundPrecisionProvider;

@Configuration
@Profile({"dev", "!prod"})
@PropertySource(ignoreResourceNotFound=true, value={"classpath:app.properties", "file:/$(configLoc)app2.properties"})
public class AppConfig {
	
	@Bean
	public ResourceBundleMessageSource messageSource(){
		ResourceBundleMessageSource source = new ResourceBundleMessageSource();
		source.setBasename("i18n/messages");
		return source;
	}
	
	@Bean
	public CurrencyRateProvider fileCurrencyRateProvider() {
		return new FileCurrencyRateProvider();
	}
	
	@Bean
	public RateConversionService rateConversionService() {
		RateConversionService rateConversionService = new RateConversionService();
		return rateConversionService;
	}
	
	@Bean
	public RoundPrecisionProvider roundPrecisionProvider(){
		return new FixedPrecisionProvider();
	}
	
	@Bean(name="anotherPrecisionProvider")
	public RoundPrecisionProvider roundJpyPrecisionProvider(){
		return new JpyPrecisionProvider();
	}
	
	@Bean
	public static PropertySourcesPlaceholderConfigurer placeholderConfigurer(){
		return new PropertySourcesPlaceholderConfigurer();
	}
}
